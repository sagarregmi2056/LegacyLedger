/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace LegacyLedger {
  export type AssetStruct = {
    id: string;
    name: string;
    assetType: string;
    uri: string;
    owner: AddressLike;
    isTransferable: boolean;
    isActive: boolean;
  };

  export type AssetStructOutput = [
    id: string,
    name: string,
    assetType: string,
    uri: string,
    owner: string,
    isTransferable: boolean,
    isActive: boolean
  ] & {
    id: string;
    name: string;
    assetType: string;
    uri: string;
    owner: string;
    isTransferable: boolean;
    isActive: boolean;
  };

  export type BeneficiaryStruct = {
    wallet: AddressLike;
    name: string;
    sharePercentage: BigNumberish;
    isActive: boolean;
  };

  export type BeneficiaryStructOutput = [
    wallet: string,
    name: string,
    sharePercentage: bigint,
    isActive: boolean
  ] & {
    wallet: string;
    name: string;
    sharePercentage: bigint;
    isActive: boolean;
  };
}

export interface LegacyLedgerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addBeneficiary"
      | "assets"
      | "getOwnerAssets"
      | "getOwnerBeneficiaries"
      | "owner"
      | "ownerAssets"
      | "ownerBeneficiaries"
      | "registerAsset"
      | "removeBeneficiary"
      | "renounceOwnership"
      | "transferAsset"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssetRegistered"
      | "AssetTransferred"
      | "BeneficiaryAdded"
      | "BeneficiaryRemoved"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addBeneficiary",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "assets", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getOwnerAssets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerBeneficiaries",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerAssets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerBeneficiaries",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAsset",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBeneficiary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferAsset",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerBeneficiaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerBeneficiaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AssetRegisteredEvent {
  export type InputTuple = [assetId: string, owner: AddressLike, name: string];
  export type OutputTuple = [assetId: string, owner: string, name: string];
  export interface OutputObject {
    assetId: string;
    owner: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetTransferredEvent {
  export type InputTuple = [
    assetId: string,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [assetId: string, from: string, to: string];
  export interface OutputObject {
    assetId: string;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeneficiaryAddedEvent {
  export type InputTuple = [
    owner: AddressLike,
    beneficiary: AddressLike,
    sharePercentage: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    beneficiary: string,
    sharePercentage: bigint
  ];
  export interface OutputObject {
    owner: string;
    beneficiary: string;
    sharePercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeneficiaryRemovedEvent {
  export type InputTuple = [owner: AddressLike, beneficiary: AddressLike];
  export type OutputTuple = [owner: string, beneficiary: string];
  export interface OutputObject {
    owner: string;
    beneficiary: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LegacyLedger extends BaseContract {
  connect(runner?: ContractRunner | null): LegacyLedger;
  waitForDeployment(): Promise<this>;

  interface: LegacyLedgerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addBeneficiary: TypedContractMethod<
    [
      beneficiaryAddress: AddressLike,
      name: string,
      sharePercentage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  assets: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, string, boolean, boolean] & {
        id: string;
        name: string;
        assetType: string;
        uri: string;
        owner: string;
        isTransferable: boolean;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getOwnerAssets: TypedContractMethod<
    [owner: AddressLike],
    [LegacyLedger.AssetStructOutput[]],
    "view"
  >;

  getOwnerBeneficiaries: TypedContractMethod<
    [owner: AddressLike],
    [LegacyLedger.BeneficiaryStructOutput[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  ownerAssets: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  ownerBeneficiaries: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, bigint, boolean] & {
        wallet: string;
        name: string;
        sharePercentage: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  registerAsset: TypedContractMethod<
    [name: string, assetType: string, uri: string, isTransferable: boolean],
    [void],
    "nonpayable"
  >;

  removeBeneficiary: TypedContractMethod<
    [beneficiaryAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferAsset: TypedContractMethod<
    [assetId: string, to: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addBeneficiary"
  ): TypedContractMethod<
    [
      beneficiaryAddress: AddressLike,
      name: string,
      sharePercentage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assets"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, string, boolean, boolean] & {
        id: string;
        name: string;
        assetType: string;
        uri: string;
        owner: string;
        isTransferable: boolean;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwnerAssets"
  ): TypedContractMethod<
    [owner: AddressLike],
    [LegacyLedger.AssetStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwnerBeneficiaries"
  ): TypedContractMethod<
    [owner: AddressLike],
    [LegacyLedger.BeneficiaryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerAssets"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "ownerBeneficiaries"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, bigint, boolean] & {
        wallet: string;
        name: string;
        sharePercentage: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerAsset"
  ): TypedContractMethod<
    [name: string, assetType: string, uri: string, isTransferable: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeBeneficiary"
  ): TypedContractMethod<
    [beneficiaryAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferAsset"
  ): TypedContractMethod<
    [assetId: string, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AssetRegistered"
  ): TypedContractEvent<
    AssetRegisteredEvent.InputTuple,
    AssetRegisteredEvent.OutputTuple,
    AssetRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "AssetTransferred"
  ): TypedContractEvent<
    AssetTransferredEvent.InputTuple,
    AssetTransferredEvent.OutputTuple,
    AssetTransferredEvent.OutputObject
  >;
  getEvent(
    key: "BeneficiaryAdded"
  ): TypedContractEvent<
    BeneficiaryAddedEvent.InputTuple,
    BeneficiaryAddedEvent.OutputTuple,
    BeneficiaryAddedEvent.OutputObject
  >;
  getEvent(
    key: "BeneficiaryRemoved"
  ): TypedContractEvent<
    BeneficiaryRemovedEvent.InputTuple,
    BeneficiaryRemovedEvent.OutputTuple,
    BeneficiaryRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AssetRegistered(string,address,string)": TypedContractEvent<
      AssetRegisteredEvent.InputTuple,
      AssetRegisteredEvent.OutputTuple,
      AssetRegisteredEvent.OutputObject
    >;
    AssetRegistered: TypedContractEvent<
      AssetRegisteredEvent.InputTuple,
      AssetRegisteredEvent.OutputTuple,
      AssetRegisteredEvent.OutputObject
    >;

    "AssetTransferred(string,address,address)": TypedContractEvent<
      AssetTransferredEvent.InputTuple,
      AssetTransferredEvent.OutputTuple,
      AssetTransferredEvent.OutputObject
    >;
    AssetTransferred: TypedContractEvent<
      AssetTransferredEvent.InputTuple,
      AssetTransferredEvent.OutputTuple,
      AssetTransferredEvent.OutputObject
    >;

    "BeneficiaryAdded(address,address,uint256)": TypedContractEvent<
      BeneficiaryAddedEvent.InputTuple,
      BeneficiaryAddedEvent.OutputTuple,
      BeneficiaryAddedEvent.OutputObject
    >;
    BeneficiaryAdded: TypedContractEvent<
      BeneficiaryAddedEvent.InputTuple,
      BeneficiaryAddedEvent.OutputTuple,
      BeneficiaryAddedEvent.OutputObject
    >;

    "BeneficiaryRemoved(address,address)": TypedContractEvent<
      BeneficiaryRemovedEvent.InputTuple,
      BeneficiaryRemovedEvent.OutputTuple,
      BeneficiaryRemovedEvent.OutputObject
    >;
    BeneficiaryRemoved: TypedContractEvent<
      BeneficiaryRemovedEvent.InputTuple,
      BeneficiaryRemovedEvent.OutputTuple,
      BeneficiaryRemovedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
